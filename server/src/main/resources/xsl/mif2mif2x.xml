<xsl:stylesheet version="1.0"
   xmlns:mif="http://psi.hupo.org/mi/mif"
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >

<!-- ======================================================================= -->
<!-- XSLT transformation  MIF 2.5.x to MITAB 2.5/2.7-like PSICQUIC index     -->
<!--   parameters:                                                           -->
<!--       file - file name                                                  -->
<!--       expand - expansion flag (true/false)                              -->
<!--                                                                         -->
<!--  NOTE: bait/prey (ie spoke) expansion only; retains interaction type.   -->
<!--        The latter should be modified to promote 'association'           -->
<!--        to 'physical association'.                                       -->
<!-- ======================================================================= -->
<!--                                                                         -->
<!-- record/doc PID: <$file>:<entry#>:<int id>:<evid id>[:prt id:pt id]      -->
<!--                                                                         -->
<!-- ======================================================================= -->

  <xsl:param name="debug">false</xsl:param>
  <xsl:param name="format">2.5.4</xsl:param>
  <xsl:param name="natext">-</xsl:param>

  <xsl:include href="mif2xpsq.xml"/> 
  
  <!-- ===================================================================== -->
  <!-- build document/complex-record                                         -->
  <!-- ===================================================================== -->

  <xsl:template name="complex-record">
    <xsl:param name="src" />
    <xsl:param name="fep" />
    <xsl:param name="evd" />
    <xsl:param name="int" />
    <xsl:param name="aprt" />
    <xsl:param name="bprt" />

    <xsl:if test="$debug = 'true'">
     <xsl:text>&#xA;complex-record&#xA;</xsl:text>
    </xsl:if>  

    <xsl:element name="doc">
      <xsl:element name="field">
        <xsl:attribute name="name">recId</xsl:attribute>
        <xsl:value-of select="concat($fep,':',$evd/@id,':cx')"/>
      </xsl:element>
        
      <xsl:element name="field">
        <xsl:attribute name="name">view</xsl:attribute>

        <xsl:for-each select='$aprt'>
          <xsl:variable name="a" select='.'/>
            <xsl:for-each select='$bprt'>
              <xsl:variable name="b" select='.'/>

              <xsl:if test="$debug = 'true'">           
                <xsl:text>a::b= </xsl:text><xsl:value-of select='$a/@id'/>
                  <xsl:text>::</xsl:text><xsl:value-of select='$b/@id'/>
                <xsl:text>&#xA;</xsl:text>
              </xsl:if>
 
             <xsl:call-template name="binary-view">
               <xsl:with-param name="src" select="$src" />
               <xsl:with-param name="fep" select="$fep" />
               <xsl:with-param name="evd" select="$evd" />
               <xsl:with-param name="int" select="$int" />
               <xsl:with-param name="a" select="$a" />
               <xsl:with-param name="b" select="$b" />
               <xsl:with-param name="debug" select="$debug" />
             </xsl:call-template> 
             <!-- <xsl:text>&#xA;</xsl:text> -->
            </xsl:for-each>
          </xsl:for-each>

        </xsl:element>
    </xsl:element>
 </xsl:template>

<!-- ======================================================================= -->

  <xsl:template name="record">
    <xsl:param name="src" />
    <xsl:param name="fep" />
    <xsl:param name="evd" />
    <xsl:param name="int" />
    <xsl:param name="aprt" />
    <xsl:param name="bprt" />
    <xsl:param name="epid">false</xsl:param>
    <xsl:param name="expand"/>

    <xsl:for-each select='$aprt'>
      <xsl:variable name="a" select='.'/>
        <xsl:for-each select='$bprt'>
          <xsl:variable name="b" select='.'/>

          <xsl:if test="$debug = 'true'">   
            <xsl:text>a::b= </xsl:text><xsl:value-of select='$a/@id'/>
             <xsl:text>::</xsl:text><xsl:value-of select='$b/@id'/>
            <xsl:text>&#xA;</xsl:text>
          </xsl:if>

          <xsl:element name="doc">
           <xsl:element name="field">
             <xsl:attribute name="name">recId</xsl:attribute>
             <xsl:if test="$epid = 'false'">
              <xsl:value-of select="concat($fep,':',$evd/@id)"/>
             </xsl:if>
             <xsl:if test="$epid = 'true'">
              <xsl:value-of select="concat($fep,':',$evd/@id,
                                           ':',$a/@id,':',$b/@id)" />
             </xsl:if>
           </xsl:element> 

           <xsl:element name="field">
             <xsl:attribute name="name">view</xsl:attribute>
              
           <xsl:call-template name="binary-view">
             <xsl:with-param name="src" select="$src" />
             <xsl:with-param name="fep" select="$fep" />
             <xsl:with-param name="evd" select="$evd" />
             <xsl:with-param name="int" select="$int" />
             <xsl:with-param name="a" select="$a" />
             <xsl:with-param name="b" select="$b" />
             <xsl:with-param name="debug" select="$debug" />
             <xsl:with-param name="expand" select="$expand"/>
           </xsl:call-template> 

          </xsl:element>      

        </xsl:element>
        <xsl:text>&#xA;</xsl:text>
      </xsl:for-each>
    </xsl:for-each>
  </xsl:template>

<!-- ======================================================================= -->
<!-- ======================================================================= -->

  <xsl:template name="binary-view">
    <xsl:param name="src" />
    <xsl:param name="fep" />
    <xsl:param name="evd" />
    <xsl:param name="int" />
    <xsl:param name="a" />
    <xsl:param name="b" />
    <xsl:param name="expand" />
    <xsl:param name="debug">true</xsl:param> 

    <xsl:element name="entry">
       <xsl:attribute name="id"><xsl:value-of select="$evd/@id"/></xsl:attribute>
       <xsl:apply-templates select="$src" mode="copy"/>
       <xsl:element name="interactionList">
         <xsl:apply-templates select="$int" mode="copy-int">
           <xsl:with-param name="evd" select="$evd"/> 
         </xsl:apply-templates>
        </xsl:element>
    </xsl:element>

  </xsl:template>

  <xsl:template match="@*|node()" mode="copy">
    
    <xsl:copy>
      <xsl:apply-templates select="@*|node()" mode="copy"/> 
    </xsl:copy>
  </xsl:template>

  <xsl:template match="@*|node()" mode="copy-int">       
     <xsl:choose>
      <xsl:when test="local-name(.) = 'experimentRef'">
        <xsl:apply-templates select="." mode="experiment-ref"/>
      </xsl:when>

      <xsl:when test="local-name(.) = 'interactorRef'">
        <xsl:apply-templates select="." mode="interactor-ref"/>
      </xsl:when>

      <xsl:otherwise>
        <xsl:copy>
            <xsl:apply-templates select="@*|node()" mode="copy-int"/> 
        </xsl:copy>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="*" mode="interactor-ref">
    <xsl:variable name="id" select="text()"/>
    <xsl:apply-templates select="//mif:interactor[@id=$id]" mode="copy"/>
  </xsl:template> 

  <xsl:template match="*" mode="experiment-ref">
    <xsl:variable name="id" select="text()"/>
    <xsl:apply-templates select="//mif:experimentDescription[@id=$id]" mode="copy"/>
  </xsl:template> 

</xsl:stylesheet>
